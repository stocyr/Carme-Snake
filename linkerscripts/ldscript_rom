/**
 *******************************************************************************
 * \file    ldscript
 *******************************************************************************
 * \brief   Linkerscript for CARME-Board (Flash)
 *
 * \version	2.2
 * \date	17.03.2008
 * \author	M.Muehlemann
 *
 *
 *******************************************************************************
 *
 * \remark  Last Modifications:
 * 			$LastChangedDate:  $
 * 			$LastChangedRevision:  $
 * 			$LastChangedBy:  $
 *
 *******************************************************************************
 */

/* identify the Entry Point ***************************************************/
ENTRY(_startup)

/* specify the colibri memory areas *******************************************/
MEMORY 
 {
  flash				: ORIGIN = 0x00000000, LENGTH = 0x02000000	/* 32MB FLASH */
  ram   			: ORIGIN = 0xA0000000, LENGTH = 0x04000000	/* 64MB RAM   */
 }

/* specify sections ***********************************************************/
SECTIONS 
 {
	
	/* startup code 														  */
	.text :					
	{
		. = ALIGN(4);	/* advance location counter to the next 32bit boundary*/
		*(.startup)
	    *(.glue_7)
	    *(.glue_7t)
	} >flash

	/* collect all sections that should go into ram after startup  			  */ 
	.text :					
	{
		. = ALIGN(4);	/* advance location counter to the next 32bit boundary*/
		*(.text*)		/* all .text* sections (executable code)				  */
		*(.rodata*)		/* all .rodata sections (constants, strings, etc.)	  */
		*(.glue_7)		/* all .glue_7 sections  (no idea what these are)	  */
		*(.glue_7t)		/* all .glue_7t sections (no idea what these are)	  */
		*(.ctors*)	
		_etext = .;		/* define a symbol _etext after the last code byte	  */
	} >flash  			

	/* collect all initialized .data sections that go into RAM  			  */ 
	.data :	AT(	_etext)	
	{
		. = ALIGN(4);	/* advance location counter to the next 32bit boundary*/
		_data = .;		/* define a symbol for the start of the .data section */
		*(.data*)		/* all .data sections								  */
		_edata = .;		/* define a symbol for the end of the .data section   */
	} >ram

	.gcc_except_table :
	{
		. = ALIGN(4);		/* advance location counter to the next 32bit boundary*/
		*(.gcc_except_table)/* all .text sections (executable code)			  */
	} >ram

	/* collect all uninitialized .bss sections that go into RAM  			  */
	.bss :								
	{
		. = ALIGN(4);	/* advance location counter to the next 32bit boundary*/
		_bss_start = .;	/* define a symbol for the start of the .bss section  */
		__bss_start__ = .;
		*(.bss*)			/* all .bss sections  							  */
		*(.bss) *(COMMON)	/* COMMON symbols								  */
		
		/* reserve memory for the USER-stack								  */
		. = ALIGN(4);	/* advance location counter to the next 32bit boundary*/
		_stack_start_address = .;
		. += USR_STACK_SIZE;
		
		/* reserve memory for the SVC-stack									  */
		. = ALIGN(4);
		_usr_stack_top_address = .;
		. += SVC_STACK_SIZE;
		
		/* reserve memory for the IRQ-stack									  */
		. = ALIGN(4);
		_svc_stack_top_address = .;
		. += IRQ_STACK_SIZE;
		
		/* reserve memory for the FIQ-stack									  */
		. = ALIGN(4);
		_irq_stack_top_address = .;
		. += FIQ_STACK_SIZE;
	
		/* reserve memory for the ABORT-stack								  */
		. = ALIGN(4);
		_fiq_stack_top_address = .;
		. += ABT_STACK_SIZE;
	
		/* reserve memory for the UNDEF-stack								  */
		. = ALIGN(4);
		_abt_stack_top_address = .;
		. += UND_STACK_SIZE;	
	
		. = ALIGN(4);
		_und_stack_top_address = .;
		_stack_end_address = .;
		_bss_end = . ;		/* define a symbol marking the end of the .bss section */
		__bss_end__ = .;
	
		PROVIDE (end = .);
		PROVIDE (_end = .);
		PROVIDE (__stack = .);
		
	} >ram
		
	PROVIDE (end_of_ram = ORIGIN(ram) + LENGTH(ram)) ;
	
	.debug_info     0 : { *(.debug_info) }
   	.debug_abbrev   0 : { *(.debug_abbrev) }
   	.debug_line     0 : { *(.debug_line) }
   	.debug_frame    0 : { *(.debug_frame) }
 }	

